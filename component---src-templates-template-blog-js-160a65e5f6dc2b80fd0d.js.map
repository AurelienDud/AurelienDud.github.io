{"version":3,"sources":["webpack://aureliendud-website/./src/services/formaters.js","webpack://aureliendud-website/./src/templates/template-blog.js"],"names":["formatBlogData","data","title","frontmatter","date","category","cover","childImageSharp","excerpt","link","fields","slug","body","coverStyle","css","coverImgStyles","Template","model","location","pageContext","pathname","mdx","coverEl","useRef","parallax","scroll","mov","elBound","useEffect","current","getBoundingClientRect","window","addEventListener","handleScroll","removeEventListener","event","preventDefault","scrollY","height","Math","max","round","opacity","sign","style","transform","className","overflow","cx","ref","G","image","getImage","alt","MDXProvider","components","mdxComponents","MDXRenderer"],"mappings":"+HAIO,SAASA,EAAeC,GAAO,IAAD,YACnC,MAAO,CACLC,OAAOD,SAAA,UAAAA,EAAME,mBAAN,eAAmBD,QAAS,KACnCE,MAAMH,SAAA,UAAAA,EAAME,mBAAN,eAAmBC,OAAQ,KACjCC,UAAUJ,SAAA,UAAAA,EAAME,mBAAN,eAAmBE,WAAY,KACzCC,OAAOL,SAAA,UAAAA,EAAME,mBAAN,mBAAmBG,aAAnB,eAA0BC,kBAAmB,KACpDC,QAASP,EAAKO,SAAW,KACzBC,MAAMR,SAAA,UAAAA,EAAMS,cAAN,eAAcC,OAAQ,KAC5BC,KAAMX,EAAKW,MAAQ,M,sOC8BjBC,GAAaC,QAAH,yXAiBVC,GAAiBD,QAAH,oeAqBL,SAASE,EAAT,GAA8D,IAA1Cf,EAAyC,EAAzCA,KAE3BgB,GAFoE,EAAnCC,SAAmC,EAAzBC,YAAyB,EAAZC,UAEhDpB,OAAeC,EAAKoB,MAG5BC,GAAUC,YAAO,MAGjBC,GAAWD,YAAO,CACtBE,OAAQ,EACRC,IAAK,EACLC,QAAS,OAmDX,OA/CAC,gBAAU,WACHX,EAAMX,OAAUgB,EAAQO,UAExBL,EAASK,QAAQF,UACpBH,EAASK,QAAQF,QAAUL,EAAQO,QAAQC,4BAC5C,CAACR,EAASL,KAGbW,gBAAU,WACR,GAAKX,EAAMX,OAAUgB,EAAQO,QAiC7B,OAHAE,OAAOC,iBAAiB,SAAUC,GAG3B,WACLF,OAAOG,oBAAoB,SAAUD,IA/BvC,SAASA,EAAaE,GAGpB,GAFAA,EAAMC,iBAGHZ,EAASK,QAAQF,WAClBI,OAAOM,QAAUb,EAASK,QAAQF,QAAQW,QAF5C,CAMA,IAAMb,EAASc,KAAKC,IAAI,EAAGD,KAAKE,MArGb,KAqGmBV,OAAOM,UACvCX,EAAMa,KAAKE,MAAMhB,EAASD,EAASK,QAAQJ,QAC3CiB,EACJ,EAAK,EAAIlB,EAASK,QAAQF,QAAQW,OAAUb,EAxG3B,KA2GjBc,KAAKI,KAAKjB,KAASa,KAAKI,KAAKnB,EAASK,QAAQH,MAClB,IAA5BF,EAASK,QAAQJ,SAEjBH,EAAQO,QAAQe,MAAMC,UAAtB,kBAAoDpB,EAApD,SACAH,EAAQO,QAAQe,MAAMF,QAAUA,GAGlClB,EAASK,QAAQJ,OAASA,EAC1BD,EAASK,QAAQH,IAAMA,MAUxB,CAACT,IAGF,gBAAC,IAAD,KAEE,gBAAC,IAAD,MACA,uBAAK6B,UAAU,YAEZ7B,EAAMX,OACL,uBAAKsC,MAAO,CAAEG,SAAU,WACtB,uBAAKD,WAAWE,QAAGnC,EAAY,eAC7B,uBAAKiC,UAAU,qBACb,uBAAKA,UAAW/B,EAAgBkC,IAAK3B,GACnC,gBAAC,EAAA4B,EAAD,CAAaC,OAAOC,OAASnC,EAAMX,OAAQ+C,IAAI,SAQzD,uBAAKP,UAAU,wBACX7B,EAAMf,OAASe,EAAMZ,WACrB,uBAAKyC,UAAU,uBAEZ7B,EAAMZ,UACL,uBAAKyC,UAAU,8BACZ7B,EAAMZ,UAKVY,EAAMf,OAAS,sBAAI4C,UAAU,OAAO7B,EAAMf,QAI/C,uBAAK4C,UAAU,0BAEZ7B,EAAMb,MACL,qBAAG0C,UAAU,oBAAb,aAA2C7B,EAAMb,MAIlDa,EAAML,MACL,gBAAC,EAAA0C,YAAD,CAAaC,WAAYC,KACvB,gBAAC,EAAAC,YAAD,KAAcxC,EAAML,UAM9B,gBAAC,IAAD","file":"component---src-templates-template-blog-js-160a65e5f6dc2b80fd0d.js","sourcesContent":["/**\n * Format data from graphQL into a friendly flat object\n * @param {object} data from graphQL\n */\nexport function formatBlogData(data) {\n  return {\n    title: data?.frontmatter?.title || null,\n    date: data?.frontmatter?.date || null,\n    category: data?.frontmatter?.category || null,\n    cover: data?.frontmatter?.cover?.childImageSharp || null,\n    excerpt: data.excerpt || null,\n    link: data?.fields?.slug || null,\n    body: data.body || null,\n  };\n}\n","import React, { useRef, useEffect } from \"react\";\nimport { cx, css } from \"@emotion/css\";\nimport { graphql } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\nimport mdxComponents from \"../services/mdxConvertor\";\nimport { formatBlogData } from \"../services/formaters\";\nimport Layout from \"./layout\";\nimport Header from \"../components/header\";\nimport Footer from \"../components/footer\";\n\n/**\n * Settings\n */\nconst parallaxStrength = 1.25;\n\n/**\n * QUery\n */\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      body\n      frontmatter {\n        title\n        category\n        date\n        cover {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * Styles\n */\nconst coverStyle = css`\n  position: relative;\n  overflow: hidden;\n  box-shadow: 0px -40px 40px -40px inset #00000030;\n  &:after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-top: solid 2vw transparent;\n    border-bottom: solid 2vw white;\n    border-left: solid 50vw white;\n    border-right: solid 50vw white;\n  }\n`;\n\nconst coverImgStyles = css`\n  position: relative;\n  border-radius: 5px;\n  border-top: solid 6px white;\n  border-right: solid 6px white;\n  border-left: solid 6px white;\n  transform-origin: center;\n  transform: translate3d(0, 0, 0);\n  -webkit-transform-style: preserve-3d;\n  -webkit-backface-visibility: hidden;\n  transition: all 0s 0s;\n  background-color: #ffffff30;\n  opacity: 1;\n  transition: opacity linear 0.4s;\n  box-shadow: rgb(0 0 0 / 33%) 0px -45px 20px -20px inset;\n`;\n\n/**\n * View\n * @param {object} props\n */\nexport default function Template({ data, location, pageContext, pathname }) {\n  // format mdx data\n  const model = formatBlogData(data.mdx);\n\n  // set a ref on the cover container to create the visual effect\n  const coverEl = useRef(null);\n\n  // set a ref to manage the parallax effect\n  const parallax = useRef({\n    scroll: 0,\n    mov: 0,\n    elBound: null,\n  });\n\n  // init parallax\n  useEffect(() => {\n    if (!model.cover || !coverEl.current) return;\n\n    if (!parallax.current.elBound)\n      parallax.current.elBound = coverEl.current.getBoundingClientRect();\n  }, [coverEl, model]);\n\n  // manage parallax effect\n  useEffect(() => {\n    if (!model.cover || !coverEl.current) return;\n\n    // handle event\n    function handleScroll(event) {\n      event.preventDefault();\n\n      if (\n        !parallax.current.elBound ||\n        window.scrollY > parallax.current.elBound.height\n      )\n        return;\n\n      const scroll = Math.max(0, Math.round(window.scrollY * parallaxStrength));\n      const mov = Math.round(scroll - parallax.current.scroll);\n      const opacity =\n        1 - (1 / parallax.current.elBound.height) * scroll * parallaxStrength;\n\n      if (\n        Math.sign(mov) === Math.sign(parallax.current.mov) ||\n        parallax.current.scroll === 0\n      ) {\n        coverEl.current.style.transform = `translate3d(0, ${scroll}px, 0)`;\n        coverEl.current.style.opacity = opacity;\n      }\n\n      parallax.current.scroll = scroll;\n      parallax.current.mov = mov;\n    }\n\n    // create event\n    window.addEventListener(\"scroll\", handleScroll);\n\n    // remove event\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [model]);\n\n  return (\n    <Layout>\n      {/* header */}\n      <Header />\n      <div className=\"str-page\">\n        {/* cover */}\n        {model.cover && (\n          <div style={{ overflow: \"hidden\" }}>\n            <div className={cx(coverStyle, \"bg-primary\")}>\n              <div className=\"container-reading\">\n                <div className={coverImgStyles} ref={coverEl}>\n                  <GatsbyImage image={getImage(model.cover)} alt=\"\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* content */}\n        <div className=\"container mt-4 mb-5\">\n          {(model.title || model.category) && (\n            <div className=\"h1 mb-4 text-center\">\n              {/* category */}\n              {model.category && (\n                <div className=\"badge badge-secondary mb-1\">\n                  {model.category}\n                </div>\n              )}\n\n              {/* title */}\n              {model.title && <h1 className=\"h-0\">{model.title}</h1>}\n            </div>\n          )}\n\n          <div className=\"container-reading mt-3\">\n            {/* date */}\n            {model.date && (\n              <p className=\"text-muted small\">publi√© le {model.date}</p>\n            )}\n\n            {/* body */}\n            {model.body && (\n              <MDXProvider components={mdxComponents}>\n                <MDXRenderer>{model.body}</MDXRenderer>\n              </MDXProvider>\n            )}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </Layout>\n  );\n}\n"],"sourceRoot":""}